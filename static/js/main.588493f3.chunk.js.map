{"version":3,"sources":["Components/RateA/RateA.js","Components/RateB/RateB.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["RateA","useForm","register","handleSubmit","errors","useState","getCurrentPay","setCurrentPay","getTotal","setTotal","className","onSubmit","data","drive_miles","current_pay","parseFloat","type","step","placeholder","name","ref","required","min","max","toFixed","RateB","React","value","setValue","RadioGroup","aria-label","onChange","event","target","FormControlLabel","control","Radio","label","Home","getClickButton","setClickButton","handleClick","button","Button","onClick","e","variant","color","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.588493f3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction RateA() {\n\n    const { register, handleSubmit, errors } = useForm();\n    const [getCurrentPay, setCurrentPay] = useState(0);\n    const [getTotal, setTotal] = useState(0);\n    const onSubmit = data => {\n\n        const {drive_miles,current_pay} = data;\n        const total_kwh = 9003.714027\n        setCurrentPay((parseFloat(total_kwh)+parseFloat(drive_miles)*0.3)*parseFloat(current_pay));\n        setTotal((parseFloat(total_kwh)+parseFloat(drive_miles)*0.3)*0.15);\n    }\n\n  return (\n\n    <div className='container'>\n        <div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <h1>Rate A Calculation</h1>\n                <label>What is your current $/kWh rate?</label>\n                <input type=\"number\" step=\"any\" placeholder=\"(Between $0.00 - $1.00)\" name=\"current_pay\" ref={register({required: true, min:0, max: 1})} />\n                    {errors.current_pay && (\n                        <p>Please enter a value between $0.00 - $1.00</p>\n                    )}\n                <label>How many miles do you drive per year?</label>\n                <input type=\"number\" step=\"any\" placeholder=\"On avg. 17,000 miles/year\" name=\"drive_miles\" ref={register({required: true})} />\n                    {errors.drive_miles && (\n                        <p>Miles you drive per year is required</p>\n                    )}\n                {/*<label>USA NY Buffalo.725280 TMY2</label>*/}\n                {/*<input type=\"number\" step=\"any\" placeholder=\"USA NY Buffalo.725280 TMY2\" name=\"total_kwh\" ref={register({required: true})} />*/}\n                {/*    {errors.total_kwh && (*/}\n                {/*        <p>USA NY Buffalo.725280 TMY2 is required</p>*/}\n                {/*    )}*/}\n                <input type=\"submit\" />\n            </form>\n        </div>\n        <div className='display-result'>\n            <h1>Final Bill</h1>\n\n            <div className=\"parent-div\">\n                <div className=\"current-pay\">\n                    <h2>Total bill with current pay</h2>\n                    <h2> ${getCurrentPay.toFixed(2)}</h2>\n                </div>\n                <div>\n                    <h2>Total bill with Rate A ($0.15/kWh)</h2>\n                    <h2>${getTotal.toFixed(2)}</h2>\n                </div>\n            </div>\n            <h2>Result </h2>\n            {\n                   getCurrentPay && getTotal?getCurrentPay>getTotal?'Rate A is cheaper than what you pay currently ':'Currently you pay cheaper than Rate A':''\n            }\n        </div>\n    </div>\n  );\n}\n\nexport default RateA;","import React, { useState } from 'react';\n// import CSVReader from \"react-csv-reader\";\nimport { useForm } from 'react-hook-form';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nfunction RateB() {\n\n    const { register, handleSubmit, errors } = useForm();\n    // const [getExcelData, setExcelData] = useState(0);\n    const [getCurrentPay, setCurrentPay] = useState(0);\n    const [getTotal, setTotal] = useState(0);\n    const [value, setValue] = React.useState('1');\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n    };\n\n\n    const onSubmit = data => {\n            // const excelData = getExcelData.getExcelData;\n            let TotalkWh = 0;\n            // if(excelData){\n            //     TotalkWh = excelData.reduce((TotalkWh, key) => {\n            //         let time = key.date_time.trim();\n            //         let hour = time.substr(7, 2);\n            //         if(parseInt(value)===1 && (hour>=12 && hour<=18)){\n            //             return TotalkWh + key.electricity_facility__kwh__hourly_;\n            //         }else if(parseInt(value)===2){\n            //             if(hour>=12 && hour<=18){}\n            //             else{\n            //                 return TotalkWh + key.electricity_facility__kwh__hourly_;\n            //             }\n            //         }\n            //         return TotalkWh\n            //     }, 0);\n            // }\n            const { drive_miles, current_pay } = data;\n            const total_kwh = 9003.714027\n            setCurrentPay((parseFloat(total_kwh) + parseFloat(drive_miles) * 0.3) * parseFloat(current_pay));\n\n            // setCurrentPay(current_pay);\n\n            if (parseFloat(value) === 1) {  //if user select option to charge the vehicle between 12pm-6pm//\n                let TotalkWh1 = 2605.8635994650062; //total units from 12pm to 6pm//\n                let TotalkWh2 = 6397.850427506976;  //total units otherwise//\n                // setTotal((parseFloat(TotalkWh) + parseFloat(drive_miles) * 0.3) * 0.20);\n                setTotal(((parseFloat(TotalkWh1) + parseFloat(drive_miles) * 0.3) * 0.20) + (parseFloat(TotalkWh2) * 0.08));\n                // setCurrentPay((parseFloat(TotalkWh) + parseFloat(drive_miles) * 0.3) * parseFloat(current_pay));\n            } else {                //if user select option to charge the vehicle otherwise//\n                let TotalkWh1 = 6397.850427506976;   //toal units otherwise//\n                let TotalkWh2 = 2605.8635994650062;  //total units from 12pm to 6pm//\n                // setTotal((parseFloat(TotalkWh) + parseFloat(drive_miles) * 0.3) * 0.08);\n                setTotal(((parseFloat(TotalkWh1) + parseFloat(drive_miles) * 0.3) * 0.08) + (parseFloat(TotalkWh2) * 0.20));\n                // setCurrentPay((parseFloat(TotalkWh) + parseFloat(drive_miles) * 0.3) * parseFloat(current_pay));\n            }\n        }\n        // const handleForce = (data) => setExcelData({getExcelData: data});\n\n    // const papaparseOptions = {\n    //     header: true,\n    //     dynamicTyping: true,\n    //     skipEmptyLines: true,\n    //     transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n    //   };\n\n\n    return (\n\n            <\n            div className = 'container' >\n            <\n            div >\n            <\n            form onSubmit = { handleSubmit(onSubmit) } >\n            <\n            h1 > Rate B Calculation < /h1>  <\n            label > What is your current $ / kWh rate ? < /label>  <\n            input type = \"number\"\n            step = \"any\"\n            placeholder = \"(Between $0.00 - $1.00)\"\n            name = \"current_pay\"\n            ref = { register({ required: true, min: 0, max: 1 }) }\n            /> {\n            errors.current_pay && ( <\n                p > Please enter a value between $0 .00 - $1 .00 < /p>\n            )\n        } <\n        label > How many miles do you drive per year ? < /label> <\n    input type = \"number\"\n    step = \"any\"\n    placeholder = \"On avg.17,000 miles/year\"\n    name = \"drive_miles\"\n    ref = { register({ required: true, max: 17000 }) }\n    /> {\n    errors.drive_miles && ( <\n        p > On avg .17, 000 miles / year < /p>\n    )\n} <label className = 'period'> What hours of day will you charge your car ? </label>   \n        <RadioGroup aria-label = \"period\"\nname = \"period\"\nvalue = { value }\nonChange = { handleChange } >\n    <\n    FormControlLabel value = \"1\"\ncontrol = { < Radio / > }\nlabel = \"12:00 pm - 6:00 pm\" / >\n    <\n    FormControlLabel value = \"2\"\ncontrol = { < Radio / > }\nlabel = \"6:00 pm - 11:59 am\" / >\n    <\n    /RadioGroup>\n\n{ /*<CSVReader*/ } { /*    cssClass=\"react-csv-input\"*/ } { /* label=\"Select CSV with USA NY Buffalo.725280 TMY2\"*/ } { /*    onFileLoaded={handleForce}*/ } { /*    parserOptions={papaparseOptions}*/ } { /*/>*/ } <\ninput type = \"submit\" / >\n    <\n    /form> < /\ndiv >\n    <\n    div className = 'display-result' >\n    <\n    h1 > Final Bill < /h1>\n\n<\ndiv className = \"parent-div\" >\n    <\n    div className = \"current-pay\" >\n    <\n    h2 > Total bill with current pay < /h2> <\nh2 > $ { getCurrentPay.toFixed(2) } < /h2> < /\ndiv > <\n    div >\n    <\n    h2 > Total bill with Rate B < /h2> <\nh2 > $ { getTotal.toFixed(2) } < /h2> < /\ndiv > <\n    /div> <\nh2 > Result < /h2> {\ngetCurrentPay && getTotal ? getCurrentPay > getTotal ? 'Rate B is cheaper than what you pay currently ' : 'Currently you pay cheaper than Rate B' : ''\n} <\n/div>\n\n{ /*<div className='display-result'>*/ } { /*    <h1>Bill With Rate 2 TOU</h1>*/ } { /*    <h2>Current rate you pay for Electricity: {getCurrentPay}</h2>*/ } { /*    <h2>Total amount: {getTotal.toFixed(2)}</h2>*/ } { /*</div>*/ } <\n/div>\n);\n}\n\nexport default RateB;","import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport '../style.css';\nimport RateA from \"../RateA/RateA\";\nimport RateB from \"../RateB/RateB\";\nimport './Home.css';\nfunction Home() {\n    const [getClickButton, setClickButton] = useState(0);\n\n    function handleClick(button) {\n        setClickButton(button);\n    }\n\n  return (\n      <div>\n          <div className='common-area'>\n          <Button onClick={(e) => handleClick('a')} className='rate active' variant=\"contained\" color=\"primary\">Rate A</Button>\n          <label >Rate A is a flat $0.15/kWh </label>\n          <Button onClick={(e) => handleClick('b')} className='rate' variant=\"contained\" color=\"secondary\">Rate B</Button>\n          <label >Rate B is a TOU rate of $0.20/kWh between noon and 6pm, and $0.08/kWh otherwise  </label>\n          </div>\n          \n          {\n              getClickButton==='a'?<RateA/>:''\n          }\n          {\n              getClickButton==='b'?<RateB/>:''\n          }\n      </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\nimport Home from './Components/Home/Home';\n\nfunction App() {\n  //\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}